- name: Crear red sentry
  docker_network:
    name: sentry
    state: present

- name: Instalar redis para sentry
  docker_container:
    image: redis:4.0-alpine
    name: sentry-redis
    hostname: sentry-redis
    state: started
    recreate: yes
    restart_policy: always
    networks:
      - name: sentry

- name: Instalar postgres
  docker_container:
    image: postgres:10.1-alpine
    name: sentry-postgres
    hostname: sentry-postgres
    state: started
    recreate: yes
    restart_policy: always
    networks:
      - name: sentry
    env:
      POSTGRES_USER: "{{ sentry_postgres_user }}"
      POSTGRES_PASSWORD: "{{ sentry_postgres_password }}"
      POSTGRES_DB: "{{ sentry_postgres_dbname }}"
    volumes:
    - /data/sentry/postgres:/var/lib/postgresql/data:rw

- name: Correr sentry upgrade
  docker_container:
    image: sentry:8
    name: sentry-upgrade
    recreate: yes
    state: started
    cleanup: true
    detach: false
    networks:
      - name: sentry
    links:
      - sentry-redis:redis
      - sentry-postgres:postgres
    command: sentry upgrade --noinput
    env:
      SENTRY_SECRET_KEY: "{{ sentry_secret }}"
  register: sentry_upgrade
  retries: 5
  until: sentry_upgrade|succeeded
  delay: 20

- name: Crear sentry superuser
  docker_container:
    image: sentry:8
    name: sentry-createuser
    recreate: no
    state: started
    cleanup: true
    detach: false
    networks:
      - name: sentry
    links:
      - sentry-redis:redis
      - sentry-postgres:postgres
    command: "sentry createuser --email {{ sentry_user }} --password {{ sentry_pass }} --superuser"
    env:
      SENTRY_SECRET_KEY: "{{ sentry_secret }}"
  when: sentry_create_user


- name: Correr sentry
  docker_container:
    image: sentry:8
    name: sentry
    hostname: sentry
    state: started
    recreate: yes
    restart_policy: always
    networks:
      - name: sentry
    links:
    - sentry-redis:redis
    - sentry-postgres:postgres
    ports:
      - "9000"
    env:
      VIRTUAL_HOST: sentry.dev-tools.msgc.gcba
      VIRTUAL_PORT: 9000
      SENTRY_SECRET_KEY: "{{ sentry_secret }}"

- name: Correr celery beat
  docker_container:
    image: sentry:8
    name: sentry-cron
    hostname: sentry-cron
    state: started
    recreate: yes
    restart_policy: always
    networks:
      - name: sentry
    links:
    - sentry-redis:redis
    - sentry-postgres:postgres
    command: sentry run cron
    env:
      SENTRY_SECRET_KEY: "{{ sentry_secret }}"

- name: Correr celery workers
  docker_container:
    image: sentry:8
    name: "sentry-worker-{{ item }}"
    hostname: "sentry-worker-{{ item }}"
    state: started
    recreate: yes
    restart_policy: always
    networks:
      - name: sentry
    links:
    - sentry-redis:redis
    - sentry-postgres:postgres
    command: sentry run worker
    env:
      SENTRY_SECRET_KEY: "{{ sentry_secret }}"
  with_sequence: count="{{sentry_workers_count}}"
